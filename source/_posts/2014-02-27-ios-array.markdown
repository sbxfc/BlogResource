---
layout: post
title: "iOS - NSArray"
date: 2014-02-27 09:41:48 +0800
comments: true
categories: 
---

NSArray 和其子类 NSMutableArray 是iOS里用来存储有序对象的集合。其中,前者是不可变数的<font color="#bd260d">**并且是线程安全的,**</font>可以同时在多个线程中迭代。 NSMutableArray是可变的,你可以随时添加和删除里面的元素。

#初始化一个NSMutableArray

1,通过已有数组数据进行初始化

	NSMutableArray *mutableObjects = [array mutableCopy] ?: [NSMutableArray array];
	
2.使用arrayWithArray:初始化,无论参数 array 是否为空都会返回一个非空对象:


	NSMutableArray *mutableObjects = [NSMutableArray arrayWithArray:array];
	

#排序

一,第一种方式是使用 <font color="#bd260d">**NSSortDescriptor:**</font> 

在使用 NSSortDescriptor 排序时,如果你的排序对象使用 <font color="#bd260d">**@property、@synthesize**</font>来创建包含存取方法的成员变量

	@property (nonatomic,copy) NSString* property;
	
此时,你的排序对象是 <font color="#bd260d">**_property**</font>。 @property、@synthesize会为你隐式的创建存取方法和变量_property

	- (NSString*) property {
	  		return _property;
	}
	
	- (void) setProperty: (NSString*) newValue {
	    _property = newValue;
	}

指定排序对象_property:

	NSSortDescriptor *sorterSex = [NSSortDescriptor sortDescriptorWithKey:@"_sex" ascending:YES];
    NSSortDescriptor *sorterAge = [NSSortDescriptor sortDescriptorWithKey:@"_age" ascending:NO];
    NSArray *descriptor = [NSArray arrayWithObjects:sorterAge,sorterAge,nil];
    family = [family sortedArrayUsingDescriptors: descriptor];
    
在上面代码中,性别0代指女性,1代指男性。我们选择了升序排列(ascending:YES),即女性(sex == 0)排列在前的规则。同时,我们把sorterSex作为第一个元素放入描述数组descriptor里,这样,sorterSex会比sorterAge排序优先:

	[NSArray arrayWithObjects:sorterSex,sorterAge,nil];
	
二,使用<font color="#bd260d">**Block**</font>  
    
   	family = [family sortedArrayUsingComparator:^(Person* obj1, Person* obj2)
   	{
        if([obj1.name isEqualToString:@"SJJ"]){
            //把SJJ排在第一位
            return (NSComparisonResult)NSOrderedAscending;
        }
        else if(obj1.age > obj2.age){
            //把年龄大的排在前面
            return (NSComparisonResult)NSOrderedAscending;
        }
        else if(obj1.sex == 1){
            //把男性排在后面
            return (NSComparisonResult)NSOrderedDescending;
        }
       
        return (NSComparisonResult)NSOrderedAscending;
    }];